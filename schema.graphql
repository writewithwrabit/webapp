# source: http://localhost:8080/query
# timestamp: Sun Jan 19 2020 09:30:52 GMT-0800 (PST)

type Editor {
  id: ID!
  User: User!
  showToolbar: Boolean!
  showPrompt: Boolean!
  showCounter: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Entry {
  id: ID!
  User: User!
  wordCount: Int!
  content: String!
  goalHit: Boolean!
  createdAt: String!
  updatedAt: String!
}

input ExistingEntry {
  userID: String!
  wordCount: Int!
  content: String!
  goalHit: Boolean!
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUser(input: UpdatedUser!): User!
  completeUserSignup(input: SignedUpUser!): User!
  createEntry(input: NewEntry!): Entry!
  updateEntry(id: ID!, input: ExistingEntry!, date: String!): Entry!
  createEditor(input: NewEditor!): Editor!
  createSubscription(input: NewSubscription!): StripeSubscription!
  cancelSubscription(id: ID!): String!
}

input NewEditor {
  userId: String!
  showToolbar: Boolean!
  showPrompt: Boolean!
  showCounter: Boolean!
}

input NewEntry {
  userId: String!
  wordCount: Int!
  content: String!
}

input NewSubscription {
  stripeId: String!
  tokenId: String!
  subscriptionId: String!
  trial: Boolean!
}

input NewUser {
  firstName: String!
  lastName: String
  email: String!
}

type Plan {
  id: ID!
  nickname: String!
  product: String!
}

type PreferredWritingTime {
  hour: Int!
  count: Int!
}

type Query {
  user(ID: String): User!
  userByFirebaseID(firebaseID: String): User!
  editors(ID: ID): [Editor!]!
  entries(ID: ID): [Entry!]!
  entriesByUserID(userID: ID!, startDate: String, endDate: String): [Entry!]!
  dailyEntry(userID: ID!, date: String!): Entry!
  stats(global: Boolean!): Stats!
  wordGoal(userID: ID!, date: String!): Int!
}

input SignedUpUser {
  id: ID!
  firebaseID: String!
}

type Stats {
  wordsWritten: Int!
  longestStreak: Int!
  longestEntry: Int!
  preferredWritingTimes: [PreferredWritingTime]!
  preferredDayOfWeek: Int!
}

type Streak {
  id: ID!
  User: User!
  dayCount: Int!
  lastEntryID: String!
  createdAt: String!
  updatedAt: String!
}

type StripeSubscription {
  id: ID!
  currentPeriodEnd: Int!
  trialEnd: Int!
  cancelAt: Int!
  status: String!
  plan: Plan!
}

input UpdatedUser {
  id: ID!
  firebaseID: String
  stripeID: String
  firstName: String
  lastName: String
  email: String
  wordGoal: Int
}

type User {
  id: ID!
  firebaseID: String
  stripeID: String
  firstName: String!
  lastName: String
  email: String!
  wordGoal: Int!
  createdAt: String!
  updatedAt: String!
  StripeSubscription: StripeSubscription!
}
